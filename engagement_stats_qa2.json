[
	{
		"appcode": "/** \n * \n * Migration Steps:\n * Replace cache_{env} when moving between enviornments. Should find 4 locations to replace.\n * \n*/\n\nfunction clearEngagementActionCache(engagementId) {\n  var actionCacheQuery = DELETE FROM `cache_qa2` WHERE _type = \"engagementActionCache\"  AND engagementId = $engagementId;\n  actionCacheQuery.close();\n  return true;\n}\n\nfunction clearArchetypeDocsCache(archetypeId) {\n  var actionCacheQuery = DELETE FROM `cache_qa2` WHERE _type = \"archetypeActionCache\"  AND archetypeId = $archetypeId;\n  actionCacheQuery.close();\n  var stageCacheQuery = DELETE FROM `cache_qa2` WHERE _type = \"archetypeStageCache\"  AND archetypeId = $archetypeId;\n  stageCacheQuery.close();\n  var archetypeCacheQuery = DELETE FROM `cache_qa2` WHERE _type = \"archetypeCache\"  AND archetypeId = $archetypeId;\n  archetypeCacheQuery.close();\n  return true;\n}\n\nfunction isRestrictedWorkspace(doc) {\n  // lookupWorkType check\n  var restrictedWorkTypes = [\n      \"Tax\",\n      \"Consulting (Cybersecurity)\",\n      \"Deals\"\n  ];\n  if (restrictedWorkTypes.includes(doc.lookupWorkType)) {\n      return true;\n  }\n\n  // workspace tax check\n  if (doc.taxInformation) {\n      return true;\n  }\n\n  // DataClassfication check\n  var restrictedClassifications = [\n      \"Highly Confidential\"\n  ];\n  if (restrictedClassifications.includes(doc.dataClassification)) {\n      return true;\n  }\n\n  // enforce7216Compliance check\n  if (doc.enforce7216Compliance) {\n      return true;\n  }\n\n  return false;\n}\n\n// This function will get the standard stage for delivery map\nfunction getStandardStageById(bxtActionId) {\n// give these satges as lowercase name\n  var stageMapping = {\n      \"bxtAction_A\": \"align\",\n      \"bxtAction_I\": \"innovate\",\n      \"bxtAction_R\": \"release\",\n      \"bxtAction_E\": \"evolve\"\n  }\n  if (bxtActionId.toLowerCase().includes(\"bxtaction_a\")) {\n      return { id: \"bxtAction_A\", name: stageMapping.bxtAction_A };\n  }\n  else if (bxtActionId.toLowerCase().includes(\"bxtaction_i\")) {\n      return { id: \"bxtAction_I\", name: stageMapping.bxtAction_I };\n  }\n  else if (bxtActionId.toLowerCase().includes(\"bxtaction_r\")) {\n      return { id: \"bxtAction_R\", name: stageMapping.bxtAction_R };\n  }\n  else if (bxtActionId.toLowerCase().includes(\"bxtaction_e\")) {\n      return { id: \"bxtAction_E\", name: stageMapping.bxtAction_E };\n  }\n  return { id: bxtActionId, name: \"\" };\n}\n\nfunction getIntSolNameById(id) {\n  var doc = source[id];\n  if (doc) {\n      return doc.name;\n  }\n  return '';\n}\n\nfunction createEngagementCache(docId) {\n\n  var t0 = Date.now()\n  var engId = docId\n  var doc = source[docId]\n\n  log(\"Engagement Updated: \", engId)\n\n  try {\n\n      // Initialize Stats Map\n      var types = [\n          \"Internal Deliverable\",\n          \"Client Deliverable\",\n          \"Event\",\n          \"Task\",\n          \"Sub-Task\"\n      ]\n      var statuses = [\n          \"Not Started\",\n          \"In Progress\",\n          \"Blocked\",\n          \"In Internal Review\",\n          \"In External Review\",\n          \"Completed\",\n          \"Withdrawn\"\n      ]\n\n      var statMap = {}\n      for (var a of types){\n          statMap[a] = {}\n          for (var b of statuses){\n              statMap[a][b] = 0\n          }\n      }\n\n      // Initialize Action Map\n      var actionCache = []\n      var actionCacheIdPrefix = engId.replace(\"engagement\",\"engagementActionCache\");\n      var intSolId = doc.archetypeDetails.integratedSolutionId;\n      var archetypeIds = doc.archetypeDetails.baseArchetypes;\n\n      // Populate Map\n      var i = 0;\n      for (var a of doc.engagementActions){\n          if (types.includes(a.lookupActionType) && statuses.includes(a.lookupActionStatus)){\n              statMap[a.lookupActionType][a.lookupActionStatus] += 1\n          } else {\n              log(\"Invalid Status/Type: \" + a.lookupActionStatus + \",\" + a.lookupActionType)\n          }\n\n          // Action Map\n          if (a.associationId) {\n              actionCache.push({\n                  \"id\": actionCacheIdPrefix + \":\" + a.associationId,\n                  \"data\": {\n                      \"_type\": \"engagementActionCache\",\n                      \"engagementId\": docId,\n                      \"associationId\": a.associationId,\n                      \"path\": docId + \".[\" + i.toString() + \"]\",\n                      \"name\": a.name,\n                      \"archetypeIds\": archetypeIds,\n                      \"intSolId\": intSolId,\n                      \"engagementPhaseId\": a.engagementPhaseId ? a.engagementPhaseId : null,\n                      \"actionType\": a.lookupActionType,\n                      \"description\": a.description,\n                      \"sortingName\": a.name.toLowerCase()\n                  }\n              })\n          }\n\n          if (a.childEngagementActions){\n              var j = 0;\n              for (var b of a.childEngagementActions){\n                  if (types.includes(b.lookupActionType) && statuses.includes(b.lookupActionStatus)){\n                      statMap[b.lookupActionType][b.lookupActionStatus] += 1\n                  } else {\n                      log(\"Invalid Status/Type: \" + b.lookupActionStatus + \",\" + b.lookupActionType)\n                  }\n\n                  // Action Map\n                  if (b.associationId) {\n                      actionCache.push({\n                          \"id\": actionCacheIdPrefix + \":\" + b.associationId,\n                          \"data\": {\n                              \"_type\": \"engagementActionCache\",\n                              \"engagementId\": docId,\n                              \"associationId\": b.associationId,\n                              \"path\": docId + \".[\" + i.toString() + \"].[\" + j.toString() + \"]\",\n                              \"name\": b.name,\n                              \"archetypeIds\": archetypeIds,\n                              \"intSolId\": intSolId,\n                              \"engagementPhaseId\": b.engagementPhaseId ? b.engagementPhaseId : null,\n                              \"actionType\": b.lookupActionType,\n                              \"description\": b.description,\n                              \"sortingName\": b.name.toLowerCase()\n                          }\n                      })\n                  }\n\n                  if (b.childEngagementActions){\n                      var k = 0;\n                      for (var c of b.childEngagementActions){\n\n                          // Stats Map\n                          if (types.includes(c.lookupActionType) && statuses.includes(c.lookupActionStatus)){\n                              statMap[c.lookupActionType][c.lookupActionStatus] += 1\n                          } else {\n                              log(\"Invalid Status/Type: \" + c.lookupActionStatus + \",\" + c.lookupActionType)\n                          }\n\n                          // Action Map\n                          if (c.associationId) {\n                              actionCache.push({\n                                  \"id\": actionCacheIdPrefix + \":\" + c.associationId,\n                                  \"data\": {\n                                      \"_type\": \"engagementActionCache\",\n                                      \"engagementId\": docId,\n                                      \"associationId\": c.associationId,\n                                      \"path\": docId + \".[\" + i.toString() + \"].[\" + j.toString() + \"].[\" + k.toString() + \"]\",\n                                      \"name\": c.name,\n                                      \"archetypeIds\": archetypeIds,\n                                      \"intSolId\": intSolId,\n                                      \"engagementPhaseId\": c.engagementPhaseId ? c.engagementPhaseId : null,\n                                      \"actionType\": c.lookupActionType,\n                                      \"description\": c.description,\n                                      \"sortingName\": c.name.toLowerCase()\n                                  }\n                              })\n                          }\n\n\n                          k += 1;\n                      }\n                  }\n                  j += 1;\n              }\n          }\n          i += 1;\n      }\n\n      // Reformat\n      var statDocData = []\n      for (var a in statMap){\n          for (var b in statMap[a]){\n              statDocData.push({\n                  \"count\": statMap[a][b],\n                  \"status\": b,\n                  \"type\": a\n              })\n          }\n      }\n\n      // Create New Stats Doc\n      var statsDocId = engId.replace(\"engagement\",\"engagementStats\");\n      var statsDoc = {\"_type\": \"engagementStats\",  \"_schema\": \"schemaEngagementStats\",  \"audit\": {\"createdDate\": doc.audit.createdDate, \"createdUserId\": doc.audit.createdUserId, \"modifiedDate\": doc.audit.modifiedDate, \"modifiedUserId\":  doc.audit.modifiedUserId},\"data\": statDocData};\n\n      // Upsert Record\n      source[statsDocId] = statsDoc;\n\n      // Delete the old engagementActionCache docs\n      clearEngagementActionCache(docId)\n\n      // we can also check it early, but this will be almost used for engagement created\n      if (isRestrictedWorkspace(doc)) {\n          log(\"Restrict Engagement: \" + docId)\n      }\n      else {\n          // Upsert new engagementActionCache records\n          for (var a of actionCache) {\n              target[a.id] = a.data;\n          }\n      }\n      log(\"Time to Execute (ms) - Engagement:\", (Date.now() - t0))\n\n  } catch(e) {\n      log(e);\n  }\n}\n\nfunction OnUpdate(doc, meta) {\n\n  if (doc._type === \"engagement\") {\n      log(\"Engagment Initial: \" + meta.id)\n      if (!doc.lastCacheDate) { // Brand new Engagement - Execute Immediately\n          createEngagementCache(meta.id)\n\n      } else if (Date.now() > doc.lastCacheDate) { // Schedule\n          var nextExecution = new Date();\n          nextExecution.setSeconds(nextExecution.getSeconds() + 5);\n          doc.lastCacheDate = Date.now() + 5000;\n          source[meta.id] = doc;\n          log(\"Engagement Updated with Cache TS: \" + meta.id)\n\n          createTimer(createEngagementCache, nextExecution, meta.id, meta.id);\n      }\n\n  } else if (doc._type === \"archetype\") {\n\n      var t0 = Date.now()\n      var archId = meta.id\n      log(\"Archetype Updated: \", archId)\n\n      try {\n\n          // Initialize Action Map\n          var actionCache = []\n          var actionCacheIdPrefix = archId.replace(\"archetype\",\"archetypeActionCache\");\n          var intSolId = doc.intSolId;\n          // Initialize Stage Map\n          var stageCacheMap = {}\n          var stageCacheIdPrefix = archId.replace(\"archetype\", \"archetypeStageCache\");\n          var intSolName = getIntSolNameById(intSolId);\n          var archetypeName = doc.name;\n\n          // Populate Map\n          var i = 0;\n          for (var a of doc.archetypeActions) {\n              // Stage Map\n              if (a.bxtActionId && !a.isDeleted) {\n                  var stage = getStandardStageById(a.bxtActionId);\n                  stageCacheMap[stage.id] = {\n                      \"id\": stageCacheIdPrefix + \":\" + stage.id,\n                      \"data\": {\n                          \"_type\": \"archetypeStageCache\",\n                          \"name\": stage.name,\n                          \"stageId\": stage.id,\n                          \"archetypeId\": meta.id,\n                          \"archetypeSortingName\": archetypeName.toLowerCase(),\n                          \"intSolId\": intSolId,\n                          \"intSolSortingName\": intSolName.toLowerCase()\n                      }\n                  }\n              }\n\n              // Action Map\n              if (a.associationId && !a.isDeleted) {\n                  var bxtActionId = a.bxtActionId ? a.bxtActionId : \"\"; // This is going to be copied to all childred\n\n                  actionCache.push({\n                      \"id\": actionCacheIdPrefix + \":\" + a.associationId,\n                      \"data\": {\n                          \"_type\": \"archetypeActionCache\",\n                          \"archetypeId\": meta.id,\n                          \"associationId\": a.associationId,\n                          \"path\": meta.id + \".[\" + i.toString() + \"]\",\n                          \"name\": a.name,\n                          \"intSolId\": intSolId,\n                          \"bxtActionId\": bxtActionId,\n                          \"actionType\": a.lookupActionType,\n                          \"description\": a.description,\n                          \"sortingName\": a.name.toLowerCase()\n                      }\n                  })\n              }\n\n              if (a.childArchetypeActions && !a.isDeleted){\n                  var j = 0;\n                  for (var b of a.childArchetypeActions){\n\n                      // Action Map\n                      if (b.associationId && !b.isDeleted) {\n                          actionCache.push({\n                              \"id\": actionCacheIdPrefix + \":\" + b.associationId,\n                              \"data\": {\n                                  \"_type\": \"archetypeActionCache\",\n                                  \"archetypeId\": meta.id,\n                                  \"associationId\": b.associationId,\n                                  \"path\": meta.id + \".[\" + i.toString() + \"].[\" + j.toString() + \"]\",\n                                  \"name\": b.name,\n                                  \"intSolId\": intSolId,\n                                  \"bxtActionId\": bxtActionId,\n                                  \"actionType\": b.lookupActionType,\n                                  \"description\": b.description,\n                                  \"sortingName\": b.name.toLowerCase()\n                              }\n                          })\n                      }\n\n                      if (b.childArchetypeActions && !b.isDeleted){\n                          var k = 0;\n                          for (var c of b.childArchetypeActions){\n\n                              // Action Map\n                              if (c.associationId && !c.isDeleted) {\n                                  actionCache.push({\n                                      \"id\": actionCacheIdPrefix + \":\" + c.associationId,\n                                      \"data\": {\n                                          \"_type\": \"archetypeActionCache\",\n                                          \"archetypeId\": meta.id,\n                                          \"associationId\": c.associationId,\n                                          \"path\": meta.id + \".[\" + i.toString() + \"].[\" + j.toString() + \"].[\" + k.toString() + \"]\",\n                                          \"name\": c.name,\n                                          \"intSolId\": intSolId,\n                                          \"bxtActionId\": bxtActionId,\n                                          \"actionType\": c.lookupActionType,\n                                          \"description\": c.description,\n                                          \"sortName\": c.name.toLowerCase()\n                                      }\n                                  })\n                              }\n\n\n                              k += 1;\n                          }\n                      }\n                      j += 1;\n                  }\n              }\n              i += 1;\n          }\n\n          // Delete the old archetypeActionCache, archetypeStageCache and archetypeCache docs (Renamed to encompass all archetype doc types - action, stage, archetype)\n          clearArchetypeDocsCache(meta.id)\n\n          // Upsert new archetypeActionCache records, if deployed\n          if (doc.lookupArchetypeStatus === \"Deployed\") {\n              for (var a of actionCache){\n                  target[a.id] = a.data;\n              }\n\n              var stageCache = Object.values(stageCacheMap);\n              // upsert the stage cache\n              for (var stage of stageCache) {\n                  target[stage.id] = stage.data;\n              }\n\n              // Update the archetypeCache docs\n              var currentArchetype = {\n                  \"id\": meta.id,\n                  \"data\": {\n                      \"_type\": \"archetypeCache\",\n                      \"archetypeId\": meta.id,\n                      \"intSolId\": intSolId,\n                      \"intSolSortingName\": intSolName,\n                      \"description\": doc.description,\n                      \"name\": doc.name,\n                      \"sortingName\": doc.name.toLowerCase()\n                  }\n              };\n\n              // Store new archetype into cache bucket\n              target[currentArchetype.id] = currentArchetype.data;\n          }\n          \n          log(\"Time to Execute (ms) - Archetype:\", (Date.now() - t0))\n\n      } catch(e) {\n          log(e);\n      }\n\n  }\n}\n\nfunction OnDelete(meta) {\n\n  var regex = new RegExp(\"^engagement_.{16}$\");\n  if (regex.test(meta.id)){     //Check Doc Type based on ID format\n      log(\"Engagement Deleted: \", meta.id);\n      try {\n          clearEngagementActionCache(meta.id)\n      } catch(e) {\n          log(e);\n      }\n\n  }\n\n}",
		"depcfg": {
			"buckets": [
				{
					"alias": "target",
					"bucket_name": "cache_qa2",
					"scope_name": "_default",
					"collection_name": "_default",
					"access": "rw"
				},
				{
					"alias": "source",
					"bucket_name": "concourse_qa",
					"scope_name": "_default",
					"collection_name": "_default",
					"access": "rw"
				}
			],
			"source_bucket": "concourse_qa",
			"source_scope": "_default",
			"source_collection": "_default",
			"metadata_bucket": "event_metadata",
			"metadata_scope": "_default",
			"metadata_collection": "_default"
		},
		"version": "evt-7.0.3-7031-ee",
		"enforce_schema": false,
		"handleruuid": 0,
		"function_instance_id": "",
		"appname": "engagement_stats_qa2",
		"settings": {
			"dcp_stream_boundary": "everything",
			"deployment_status": false,
			"description": "",
			"execution_timeout": 60,
			"language_compatibility": "6.5.0",
			"log_level": "INFO",
			"n1ql_consistency": "none",
			"num_timer_partitions": 128,
			"processing_status": false,
			"timer_context_size": 1024,
			"user_prefix": "eventing",
			"worker_count": 1
		}
	}
]
