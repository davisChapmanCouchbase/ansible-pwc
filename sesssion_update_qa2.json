[
	{
		"appcode": "/** \n * \n * Migration Steps:\n * Replace cache_{env} when moving between enviornments. Should find 7 locations to replace.\n * \n*/\n\nfunction getSessionDoc(userId) {\n  var sessionQuery = SELECT META().id, * FROM `cache_qa2` WHERE userId = $userId;\n  var result = null;\n  for (var row of sessionQuery){\n      result = row;\n  }\n  sessionQuery.close();\n  return result;\n}\n\nfunction OnUpdate(doc, meta) {\n  \n  if (doc._type === \"userEngagement\") { //User Engagment Updated\n     \n      log(\"User Engagement Updated: \", meta.id)\n      try {\n          \n          var sessionDoc = getSessionDoc(doc.userId); // Get Session if Exists\n          if (sessionDoc) { \n              sessionDoc.cache_qa2.engagements[doc.engagementId] = {\"lookupEngPosition\": doc.lookupEngPosition, \"lookupAccessLevel\": doc.lookupAccessLevel};\n              target[sessionDoc.id] = sessionDoc.cache_qa2; //Update Session\n          }\n      } catch(e) {\n          log(e);\n      }\n    \n  } else if (doc._type === \"user\") { // User Updated\n      \n      log(\"User Updated: \", meta.id);\n      try {\n          var sessionDoc = getSessionDoc(meta.id); // Get Session if Exists\n          if (sessionDoc) {\n              sessionDoc.cache_qa2.lookupPermissionLevel = doc.lookupPermissionLevel;\n              target[sessionDoc.id] = sessionDoc.cache_qa2; //Update Session\n          }\n      } catch(e) {\n          log(e);\n      }\n      \n  }\n}\n\nfunction OnDelete(meta) {\n  \n  var regex = new RegExp(\"^user_.+?:engagement_.{16}$\");\n  \n  if (regex.test(meta.id)){     //Check Doc Type based on ID format\n      log(\"User Engagment Deleted: \", meta.id);\n      try {\n          var userId = meta.id.split(':')[0];\n          var engId = meta.id.split(':')[1];\n          var sessionDoc = getSessionDoc(userId); // Get Session if Exists\n          if (sessionDoc) { \n              delete sessionDoc.cache_qa2.engagements[engId];\n              target[sessionDoc.id] = sessionDoc.cache_qa2; //Update Session\n          }\n      } catch(e) {\n          log(e);\n      }\n      \n  }\n\n}",
		"depcfg": {
			"buckets": [
				{
					"alias": "target",
					"bucket_name": "cache_qa2",
					"scope_name": "_default",
					"collection_name": "_default",
					"access": "rw"
				},
				{
					"alias": "source",
					"bucket_name": "concourse_qa",
					"scope_name": "_default",
					"collection_name": "_default",
					"access": "rw"
				}
			],
			"source_bucket": "concourse_qa",
			"source_scope": "_default",
			"source_collection": "_default",
			"metadata_bucket": "event_metadata",
			"metadata_scope": "_default",
			"metadata_collection": "_default"
		},
		"version": "evt-7.0.3-7031-ee",
		"enforce_schema": false,
		"handleruuid": 0,
		"function_instance_id": "",
		"appname": "sesssion_update_qa2",
		"settings": {
			"dcp_stream_boundary": "everything",
			"deployment_status": false,
			"description": "",
			"execution_timeout": 60,
			"language_compatibility": "6.5.0",
			"log_level": "INFO",
			"n1ql_consistency": "none",
			"num_timer_partitions": 128,
			"processing_status": false,
			"timer_context_size": 1024,
			"user_prefix": "eventing",
			"worker_count": 1
		}
	}
]
